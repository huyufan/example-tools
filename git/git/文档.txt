删除远程分支
git branch -r -d origin/branch-name
git push origin:branch-name
git push origin --delete dev 
删除本地分支
git branch -d dev
the branch  XXX is not fully merged  原因：XXX分支有没有合并到当前分支的内容  git  branch -D dev
Git 清理无效的远程追踪分支
git remote prune origin --dry-run
查看本地分支
git branch
查看远程分支
git branch -a
创建分支
git branch test(或者 git checkout -b test(创建并切换))
切换分支
git checkout test
分支推到远程分支
git push origin test

本地新建一个分支后，必须要做远程分支关联。如果没有关联，git会在下面的操作中提示你显示
git branch --set-upstream-to=origin/<branch> dev

git fetch --all
git reset --hard origin/master
git fetch 只是下载远程的库的内容，不做任何的合并 git reset 把HEAD指向刚刚下载的最新的版本

git checkout .

git log 

git log -p -2  -p 选项展开显示每次提交的内容差异，用 -2 则仅显示最近的两次更新

git  show commit  查看提交的东西

git log --stat 显示被修改文件的修改统计信息，添加或删除了多少行

使用'git log --pretty=format'命令，可以将提交历史显示成你想要的格式。这里format的可选项包括：oneline，short，medium，full，fuller，email，raw。每种格式都有侧重的显示相关内容。

git  log  --author=

希望查看某个指定文件的提交历史 git log --pretty=oneline -- notes.c (文件)


 git update-index --assume-unchanged /path/to/file       #忽略跟踪

 git update-index --no-assume-unchanged /path/to/file  #恢复跟踪
 
  另外 git 提供了一个全局的 .gitignore，你可以在你的用户目录下创建 ~/.gitignoreglobal 文件，以同样的规则来划定哪些文件是不需要版本控制的。
需要执行 git config --global core.excludesfile ~/.gitignoreglobal来使得它生效。
 
   还有一种情况，就是已经commit了，再加入gitignore是无效的，所以需要删除下缓存
     git rm -r --cached ignore_file

注意： .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。

查看远程库
git  remote  show   origin

git  remote prune origin

使用 Git rm 命令即可，有两种选择.
         一种是 git rm --cached "文件路径"，不删除物理文件，仅将该文件从缓存中删除；
         一种是 git rm --f "文件路径"，不仅将该文件从缓存中删除，还会将物理文件删除（不会回收到垃圾桶）
    假如你有文件不小心commit到了服务器那么你想要删除它,可以使用:
	
	
	git rm -r --cached  wedsd.txt
git commit -m "delete 43.pdf desktop.ini test.txt wedsd.txt"
 git pull origin develop
git push origin develop

解决untracked file 同linux rm命令一样 (git clean -d -fx)